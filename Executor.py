# -*- coding: utf-8 -*-
"""
ACS Controller Executable Script
-------------------------------
This script connects to the ACS controller and manages axis positions
"""

from __future__ import division, print_function
import acsc_modified as acsc
import newACS
import time
import sys
from PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QHBoxLayout, QMainWindow, QLineEdit
from PyQt6.QtGui import QColor
from PyQt6.QtCore import Qt, QSize


'''
if __name__ == '__main__':
    stand = newACS.newAcsController(newACS.acs_ip, newACS.acs_port, contype="simulator", n_axes=4)
    #–ü–æ–¥–∫–ª—é—á—ë–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (simulator –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ Ethernet) –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –µ–≥–æ 4 –æ—Å–∏: 0, 1, 2, 3
    for axis in stand.axes:
         print(f"Axis {axis.axisno}: Name = {axis.get_name()}, Pos = {axis.get_pos()}")  #–í—ã–≤–æ–¥–∏–º –æ—Å–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
    stand.enable_all()
    print('All axes are enabled')
    time.sleep(2)
    stand.axes[0].start(500)
    time.sleep(2)
'''


class ACSControllerGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.stand = None
        self.axis_states = [False] * 4  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å–µ–π
        self.initUI()

    def initUI(self):
        self.setWindowTitle('ACS Controller')
        self.setGeometry(100, 100, 400, 200)  #–†–∞–∑–º–µ—Ä—ã –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ–∫–æ—à–∫–∞ –ø—Ä–∏–ª–æ–∂—É—Ö–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        
        layout = QVBoxLayout()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
        conn_layout = QHBoxLayout()
        self.connect_button = QPushButton('–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É')
        self.connect_button.clicked.connect(self.connect_to_controller)  #–ó–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
        conn_layout.addWidget(self.connect_button)
        
        self.status_label = QLabel('–û—Ç–∫–ª—é—á–µ–Ω–æ')
        self.status_label.setStyleSheet('color: red')
        conn_layout.addWidget(self.status_label)
        
        self.status_icon = QLabel('üî¥')
        conn_layout.addWidget(self.status_icon)
        
        layout.addLayout(conn_layout)
        
        # –û—Å–∏
        self.axis_buttons = []
        self.position_labels = []
        self.status_icons = []
        self.speed_inputs = []
        self.speed_labels = []
        
        for i in range(4):
            axis_layout = QHBoxLayout()
            
            enable_button = QPushButton(f'–í–∫–ª—é—á–∏—Ç—å –æ—Å—å {i}')
            enable_button.clicked.connect(lambda checked, ax=i: self.toggle_axis(ax))
            axis_layout.addWidget(enable_button)
            self.axis_buttons.append(enable_button)
            
            status_icon = QLabel('üî¥')
            axis_layout.addWidget(status_icon)
            self.status_icons.append(status_icon)
            
            pos_button = QPushButton(f'–ü–æ–∑–∏—Ü–∏—è –æ—Å–∏ {i}')
            pos_button.clicked.connect(lambda checked, ax=i: self.get_position(ax))
            axis_layout.addWidget(pos_button)
            
            pos_label = QLabel('Pos: ---')
            axis_layout.addWidget(pos_label)
            self.position_labels.append(pos_label)
            
            # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
            speed_input = QLineEdit()
            speed_input.setPlaceholderText('–°–∫–æ—Ä–æ—Å—Ç—å')
            speed_input.setFixedWidth(80)
            axis_layout.addWidget(speed_input)
            self.speed_inputs.append(speed_input)
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            apply_speed_button = QPushButton('–ü—Ä–∏–º–µ–Ω–∏—Ç—å')
            apply_speed_button.clicked.connect(lambda checked, ax=i: self.set_speed(ax))
            axis_layout.addWidget(apply_speed_button)
            
            # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            speed_label = QLabel('–°–∫–æ—Ä–æ—Å—Ç—å: ---')
            axis_layout.addWidget(speed_label)
            self.speed_labels.append(speed_label)

            #–¢–µ—Å—Ç–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            move_forward_button = QPushButton(f'–í–ø–µ—Ä—ë–¥ –Ω–∞ 500 (–æ—Å—å {i})')
            move_forward_button.clicked.connect(lambda checked, ax=i: self.move_axis(ax, 500))
            axis_layout.addWidget(move_forward_button)
            
            move_backward_button = QPushButton(f'–ù–∞–∑–∞–¥ –Ω–∞ 500 (–æ—Å—å {i})')
            move_backward_button.clicked.connect(lambda checked, ax=i: self.move_axis(ax, -500))
            axis_layout.addWidget(move_backward_button)

            layout.addLayout(axis_layout)
        
        self.setLayout(layout)
    
    def connect_to_controller(self):
            self.stand = newACS.newAcsController(newACS.acs_ip, newACS.acs_port, contype='Ethernet', n_axes=4)
            if self.stand.connect() == -1:
                self.status_label.setText('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
                self.status_label.setStyleSheet('color: red')
                self.status_icon.setText('üî¥')
            else:
                self.status_label.setText('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ')
                self.status_label.setStyleSheet('color: green')
                self.status_icon.setText('üü¢')
                #self.stand.enable_all()
    
    def toggle_axis(self, axis):
        if self.stand:
            if self.axis_states[axis]:
                self.stand.axes[axis].disable()
                self.axis_buttons[axis].setText(f'–í–∫–ª—é—á–∏—Ç—å –æ—Å—å {axis}')
                self.axis_buttons[axis].setStyleSheet('background-color:')
                self.status_icons[axis].setText('üî¥')
            else:
                self.stand.axes[axis].enable()
                self.axis_buttons[axis].setText(f'–û—Å—å {axis} –≤–∫–ª—é—á–µ–Ω–∞')
                self.axis_buttons[axis].setStyleSheet('background-color: green')
                self.status_icons[axis].setText('üü¢')
            self.axis_states[axis] = not self.axis_states[axis]
    
    def get_position(self, axis):
        if self.stand:
            if self.axis_states[axis]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Å—å
                pos = self.stand.axes[axis].get_pos()
                self.position_labels[axis].setText(f'Pos: {pos:.2f}')
            else:
                self.position_labels[axis].setText('Pos: ---')  # –ï—Å–ª–∏ –æ—Å—å –≤—ã–∫–ª—é—á–µ–Ω–∞, –ø–æ–∑–∏—Ü–∏—è –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
                
    def move_axis(self, axis, distance):
        if self.stand and self.axis_states[axis]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Å—å
            current_pos = self.stand.axes[axis].get_pos()
            target_pos = current_pos + distance
            self.stand.axes[axis].start(target_pos)
            self.get_position(axis)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è


if __name__ == '__main__':
    app = QApplication(sys.argv)  #–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ???
    window = ACSControllerGUI()
    window.show()
    sys.exit(app.exec())